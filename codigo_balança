#include <stdio.h>
#include <string.h>

// Estrutura para armazenar código, nome, valor e tipo de venda (quilo ou granel)
struct Produto {
    int codigo_produto;
    char nome_produto[30];
    float valor;
    char tipo[10];  // "quilo" ou "granel"
};

// Array para armazenar os produtos
struct Produto listaDeProdutos[100];
int totalProdutos = 0;

// Função para verificar se um código de produto já existe
int codigoExiste(int codigo) {
    for (int i = 0; i < totalProdutos; i++) {
        if (listaDeProdutos[i].codigo_produto == codigo) {
            return 1;
        }
    }
    return 0;
}

// Função para listar os produtos
void listarProdutos() {
    printf("\n\n------------------------ LISTA DE PRODUTOS -------------------------\n");

    printf("Produtos por QUILO:\n");
    printf("Código \t Produto \t Valor (R$/Kg)\n");
    for (int i = 0; i < totalProdutos; i++) {
        if (strcmp(listaDeProdutos[i].tipo, "quilo") == 0) {
            printf("%03d\t %-10s\t R$ %.2f\n", listaDeProdutos[i].codigo_produto, listaDeProdutos[i].nome_produto, listaDeProdutos[i].valor);
        }
    }
    
    printf("\nProdutos por GRANEL:\n");
    printf("Código \t Produto \t Valor (R$/Unidade)\n");
    for (int i = 0; i < totalProdutos; i++) {
        if (strcmp(listaDeProdutos[i].tipo, "granel") == 0) {
            printf("%03d\t %-10s\t R$ %.2f\n", listaDeProdutos[i].codigo_produto, listaDeProdutos[i].nome_produto, listaDeProdutos[i].valor);
        }
    }
    
    printf("--------------------------------------------------------------------\n");
}

// Função para cadastrar um novo produto
void cadastrarProduto() {
    if (totalProdutos < 100) {
        char opcao_cadastrarMais;
        int codigo;
        printf("\n\n------------------------ CADASTRAR PRODUTO -------------------------\n");
        
        // Verifica se o código já existe
        do {
            printf("Digite o código do novo produto: ");
            scanf("%d", &codigo);
            
            if (codigoExiste(codigo)) {
                printf("Código já existe! Por favor, insira um código diferente.\n");
            }
        } while (codigoExiste(codigo));

        // Quando o código for válido, armazena o produto
        listaDeProdutos[totalProdutos].codigo_produto = codigo;
        printf("Digite o nome do novo produto: ");
        getchar(); 
        fgets(listaDeProdutos[totalProdutos].nome_produto, sizeof(listaDeProdutos[totalProdutos].nome_produto), stdin);
        listaDeProdutos[totalProdutos].nome_produto[strcspn(listaDeProdutos[totalProdutos].nome_produto, "\n")] = 0;
        printf("Digite o valor do produto (R$) (utilize .): ");
        scanf("%f", &listaDeProdutos[totalProdutos].valor);
        
        // Solicitar se o produto é por quilo ou por granel
        do {
            printf("O produto será vendido por quilo ou granel? (Digite 'quilo' ou 'granel'): ");
            scanf("%s", listaDeProdutos[totalProdutos].tipo);
        } while (strcmp(listaDeProdutos[totalProdutos].tipo, "quilo") != 0 && strcmp(listaDeProdutos[totalProdutos].tipo, "granel") != 0);
        
        printf("--------------------------------------------------------------------\n");

        totalProdutos++;
        printf("Produto cadastrado com sucesso!\n");
        printf("\nDeseja cadastrar mais algum produto? (s/n): ");
        getchar();
        scanf(" %c", &opcao_cadastrarMais);
        if (opcao_cadastrarMais == 's' || opcao_cadastrarMais == 'S') {
            cadastrarProduto();
        }
    } else {
        printf("Limite de produtos atingido!\n");
    }
}

// Função para excluir um produto
void excluirProduto() {
    int codigo_produto;
    printf("\n\n------------------------ EXCLUIR PRODUTO -------------------------\n");
    printf("Digite o código do produto que deseja excluir: ");
    scanf("%d", &codigo_produto);

    int encontrado = 0;
    for (int i = 0; i < totalProdutos; i++) {
        if (listaDeProdutos[i].codigo_produto == codigo_produto) {
            encontrado = 1;
            for (int j = i; j < totalProdutos - 1; j++) {
                listaDeProdutos[j] = listaDeProdutos[j + 1];
            }
            totalProdutos--;
            printf("--------------------------------------------------------------------\n");
            printf("Produto excluído com sucesso!\n");
            break;
        }
    }
    
    if (!encontrado) {
        printf("--------------------------------------------------------------------\n");
        printf("Produto com código %d não encontrado.\n", codigo_produto);
    }
}

// Função para calcular o preço com base no tipo (quilo ou granel)
void calcularPreco() {
    int codigo;
    char continuar;
    
    do {
        printf("\n\n-------------------- CALCULAR PREÇO --------------------\n");
        printf("Digite o código do produto que deseja calcular o valor: ");
        scanf("%d", &codigo);
        
        int encontrado = 0;
        for (int i = 0; i < totalProdutos; i++) {
            if (listaDeProdutos[i].codigo_produto == codigo) {
                encontrado = 1;
                
                if (strcmp(listaDeProdutos[i].tipo, "quilo") == 0) {
                    // Produto vendido a quilo
                    float peso;
                    printf("Digite o peso em quilos: ");
                    scanf("%f", &peso);
                    float preco_total = peso * listaDeProdutos[i].valor;
                    printf("Total a pagar (R$): %.2f\n", preco_total);
                } else if (strcmp(listaDeProdutos[i].tipo, "granel") == 0) {
                    // Produto vendido a granel
                    int quantidade;
                    printf("Digite a quantidade de unidades: ");
                    scanf("%d", &quantidade);
                    float preco_total = quantidade * listaDeProdutos[i].valor;
                    printf("Total a pagar (R$): %.2f\n", preco_total);
                }
                break;
            }
        }
        
        if (!encontrado) {
            printf("Produto com código %d não encontrado.\n", codigo);
        }

        printf("Deseja calcular o preço de outro produto? (s/n): ");
        getchar();
        scanf("%c", &continuar);

    } while (continuar == 's' || continuar == 'S');
    
    printf("Voltando ao menu principal...\n");
}

// Função para abrir o Menu - Produto
void menuProdutos() {
    int opcao;
    do {
        printf("\n--------------- MENU - PRODUTOS --------------\n");
        printf("1. Lista de Produtos\n");
        printf("2. Cadastrar Produto\n");
        printf("3. Excluir Produto\n");
        printf("4. Calcular Preço\n");
        printf("5. Voltar ao Menu Principal\n");
        printf("Informe uma opção válida e aperte a tecla enter: ");
        scanf("%d", &opcao);    
        
        // Verifica a opção escolhida
        switch (opcao) {
            case 1:
                listarProdutos();
                break;
            case 2:
                cadastrarProduto();
                break;
            case 3:
                excluirProduto();
                break;
            case 4:
                calcularPreco();
                break;
            case 5:
                printf("Voltando ao menu principal...\n");
                break;
            default:
                printf("Opção inválida. Tente novamente.\n");
        }
    } while(opcao != 5);
}

int main() {
    int opcao;

    do {
        // Exibe o menu principal
        printf("--------------- MENU PRINCIPAL - BALANÇA --------------\n");
        printf("1. Produtos\n");
        printf("2. Sair\n");
        printf("Informe uma opção válida e aperte a tecla enter: ");
        scanf("%d", &opcao);

        // Verifica a opção escolhida
        switch (opcao) {
            case 1:
                menuProdutos();
                break;
            case 2:
                printf("Saindo do programa...\n");
                break;
            default:
                printf("Opção inválida. Tente novamente.\n");
        }
    } while (opcao != 2);
    
    return 0;
}
